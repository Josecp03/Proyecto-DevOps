name: Ansible - Backups

on:
  push:
    branches:
      - main
      - dev
    paths:
      - 'ansible/playbooks/bkp.yml'
      - 'ansible/roles/backup/**'
      - 'ansible/inventories/dev/group_vars/backups.yml'
  workflow_dispatch:

jobs:
  bkp:
    runs-on: ubuntu-latest
    environment: dev
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps:
      # 1. Checkout repo
      - uses: actions/checkout@v4

      # 2. Setup Python & Ansible
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - run: |
          pip install ansible-core==2.17.8 ansible-lint jq

      # 3. Setup SSH
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          # Decodifica la clave privada base64 
          echo "${{ secrets.ANSIBLE_SSH_KEY }}" | base64 --decode > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # Configuración opcional de ssh para evitar host key checking
          echo -e "Host *\n  StrictHostKeyChecking no\n" > ~/.ssh/config
          chmod 600 ~/.ssh/config

      # 4. Vault password
      - name: Vault password
        run: echo "${{ secrets.ANSIBLE_VAULT_PASSWORD }}" > ~/.vault_pass.txt

      # 5. Install Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      # 6. Debug: verificar que los secrets de Azure estén presentes
      - name: Debug Azure env
        run: |
          echo "Checking Azure env variables..."
          echo "ARM_CLIENT_ID: ${ARM_CLIENT_ID:+set}"
          echo "ARM_CLIENT_SECRET: ${ARM_CLIENT_SECRET:+set}"
          echo "ARM_SUBSCRIPTION_ID: ${ARM_SUBSCRIPTION_ID:+set}"
          echo "ARM_TENANT_ID: ${ARM_TENANT_ID:+set}"

      # 7. Terraform Init
      - name: Terraform Init
        working-directory: iac
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          TF_LOG: DEBUG
        run: terraform init -input=false -reconfigure

      # 8. Obtener outputs de Terraform
      - name: Get Terraform outputs
        working-directory: iac
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: terraform output -json > tf_outputs.json

      # 9. Generar SSH config dinámico
      - name: Generate SSH config
        run: |
          bkp_ip=$(jq -r .vm_bkp_public_ip.value iac/tf_outputs.json)
          db_ip=$(jq -r .vm_db_private_ip.value iac/tf_outputs.json)

          mkdir -p ~/.ssh
          cat > ~/.ssh/config <<EOF
          Host vm-bkp
            HostName ${bkp_ip}
            User josecp03
            IdentityFile ~/.ssh/id_rsa

          Host vm-db
            HostName ${db_ip}
            User josecp03
            ProxyJump vm-bkp
            IdentityFile ~/.ssh/id_rsa
          EOF

          chmod 600 ~/.ssh/config
          echo "Generated SSH config:"
          cat ~/.ssh/config

      # 10. Debug: probar conexión SSH antes de lanzar Ansible
      - name: Test SSH connection
        run: |
          bkp_ip=$(jq -r .vm_bkp_public_ip.value iac/tf_outputs.json)
          echo "Testing SSH connection to $bkp_ip ..."
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no josecp03@$bkp_ip "echo 'SSH connected OK'"

      # 11. Generar inventario dinámico
      - name: Generate Ansible inventory
        working-directory: ansible
        run: |
          bkp_ip=$(jq -r .vm_bkp_public_ip.value ../iac/tf_outputs.json)
          db_ip=$(jq -r .vm_db_private_ip.value ../iac/tf_outputs.json)

          cat > inventories/dev/inventory.ini <<EOF
          [all]
          vm-bkp ansible_host=${bkp_ip} ansible_user=josecp03
          vm-db ansible_host=${db_ip} ansible_user=josecp03 ansible_ssh_common_args='-o ProxyCommand="ssh -W %h:%p -q josecp03@${bkp_ip}"'

          [backups]
          vm-bkp

          [database]
          vm-db
          EOF

          echo "Generated inventory:"
          cat inventories/dev/inventory.ini

      # 12. Instalar dependencias de Ansible
      - name: Install requirements
        working-directory: ansible
        run: ansible-galaxy collection install -r requirements.yml

      # 13. Ejecutar playbook de backup
      - name: Run Backup Playbook
        working-directory: ansible
        run: ansible-playbook -i inventories/dev/inventory.ini playbooks/bkp.yml --vault-password-file ~/.vault_pass.txt
